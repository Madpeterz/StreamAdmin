<?php

namespace App\Models;

use YAPF\Framework\DbObjects\GenClass\GenClass as GenClass;
use YAPF\Framework\Responses\DbObjects\UpdateReply as UpdateReply;
use YAPF\Framework\Responses\DbObjects\SingleLoadReply as SingleLoadReply;
use App\Models\Set\NotecardmailSet as TestNotecardmail;
use App\Models\Set\RentalSet as TestRental;
use App\Models\Set\SlconfigSet as TestSlconfig;
use App\Models\Set\AuditlogSet as TestAuditlog;
use App\Models\Set\BanlistSet as TestBanlist;
use App\Models\Set\ResellerSet as TestReseller;
use App\Models\Set\StaffSet as TestStaff;
use App\Models\Set\ObjectsSet as TestObjects;
use App\Models\Set\TransactionsSet as TestTransactions;
use App\Models\Set\MessageSet as TestMessage;
use App\Models\Set\BotconfigSet as TestBotconfig;

// Do not edit this file, rerun gen.php to update!
class Avatar extends genClass
{
    protected $use_table = "avatar";
    // Data Design
    protected $fields = [
        "id",
        "avatarUUID",
        "avatarName",
        "avatarUid",
        "lastUsed",
        "credits",
    ];
    protected $dataset = [
        "id" => ["type" => "int", "value" => null],
        "avatarUUID" => ["type" => "str", "value" => null],
        "avatarName" => ["type" => "str", "value" => null],
        "avatarUid" => ["type" => "str", "value" => null],
        "lastUsed" => ["type" => "int", "value" => 1729026128],
        "credits" => ["type" => "int", "value" => 0],
    ];
    // Setters
    /**
    * setAvatarUUID
    */
    public function setAvatarUUID(?string $newValue): UpdateReply
    {
        return $this->updateField("avatarUUID", $newValue);
    }
    /**
    * setAvatarName
    */
    public function setAvatarName(?string $newValue): UpdateReply
    {
        return $this->updateField("avatarName", $newValue);
    }
    /**
    * setAvatarUid
    */
    public function setAvatarUid(?string $newValue): UpdateReply
    {
        return $this->updateField("avatarUid", $newValue);
    }
    /**
    * setLastUsed
    */
    public function setLastUsed(?int $newValue): UpdateReply
    {
        return $this->updateField("lastUsed", $newValue);
    }
    /**
    * setCredits
    */
    public function setCredits(?int $newValue): UpdateReply
    {
        return $this->updateField("credits", $newValue);
    }
    // Getters
    public function getAvatarUUID(): ?string
    {
        return $this->getField("avatarUUID");
    }
    public function getAvatarName(): ?string
    {
        return $this->getField("avatarName");
    }
    public function getAvatarUid(): ?string
    {
        return $this->getField("avatarUid");
    }
    public function getLastUsed(): ?int
    {
        return $this->getField("lastUsed");
    }
    public function getCredits(): ?int
    {
        return $this->getField("credits");
    }
    // Loaders
    public function loadByAvatarUUID(string $avatarUUID): SingleLoadReply
    {
        return $this->loadByField(
            "avatarUUID",
            $avatarUUID
        );
    }
    public function loadByAvatarName(string $avatarName): SingleLoadReply
    {
        return $this->loadByField(
            "avatarName",
            $avatarName
        );
    }
    public function loadByAvatarUid(string $avatarUid): SingleLoadReply
    {
        return $this->loadByField(
            "avatarUid",
            $avatarUid
        );
    }
    public function loadByLastUsed(int $lastUsed): SingleLoadReply
    {
        return $this->loadByField(
            "lastUsed",
            $lastUsed
        );
    }
    public function loadByCredits(int $credits): SingleLoadReply
    {
        return $this->loadByField(
            "credits",
            $credits
        );
    }
    public function relatedNotecardmail(?array $limitFields = null): TestNotecardmail
    {
        $ids = [$this->getId()];
        $collection = new TestNotecardmail();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedRental(?array $limitFields = null): TestRental
    {
        $ids = [$this->getId()];
        $collection = new TestRental();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedSlconfig(?array $limitFields = null): TestSlconfig
    {
        $ids = [$this->getId()];
        $collection = new TestSlconfig();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromOwnerAvatarLinks($ids);
        return $collection;
    }
    public function relatedAuditlog(?array $limitFields = null): TestAuditlog
    {
        $ids = [$this->getId()];
        $collection = new TestAuditlog();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedBanlist(?array $limitFields = null): TestBanlist
    {
        $ids = [$this->getId()];
        $collection = new TestBanlist();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedReseller(?array $limitFields = null): TestReseller
    {
        $ids = [$this->getId()];
        $collection = new TestReseller();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedStaff(?array $limitFields = null): TestStaff
    {
        $ids = [$this->getId()];
        $collection = new TestStaff();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedObjects(?array $limitFields = null): TestObjects
    {
        $ids = [$this->getId()];
        $collection = new TestObjects();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedTransactions(?array $limitFields = null): TestTransactions
    {
        $ids = [$this->getId()];
        $collection = new TestTransactions();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedMessage(?array $limitFields = null): TestMessage
    {
        $ids = [$this->getId()];
        $collection = new TestMessage();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedBotconfig(?array $limitFields = null): TestBotconfig
    {
        $ids = [$this->getId()];
        $collection = new TestBotconfig();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
}
// please do not edit this file
