<?php

namespace App\Models\Set;

use YAPF\Framework\Responses\DbObjects\SetsLoadReply as SetsLoadReply;
use YAPF\Framework\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use App\Models\Stream as Stream;
use App\Models\Set\RentalSet as TestRental;
use App\Models\Set\PackageSet as TestPackage;
use App\Models\Set\ServerSet as TestServer;
use App\Models\Set\TransactionsSet as TestTransactions;

// Do not edit this file, rerun gen.php to update!
class StreamSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("App\\Models\\Stream");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Stream
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Stream
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldName, $value): ?Stream
    {
        return parent::getObjectByField($fieldName, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Stream
    {
        return parent::current();
    }
    /**
     * uniqueIds
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueIds(): array
    {
        return parent::uniqueArray("id");
    }
    /**
     * uniqueServerLinks
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueServerLinks(): array
    {
        return parent::uniqueArray("serverLink");
    }
    /**
     * uniqueRentalLinks
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueRentalLinks(): array
    {
        return parent::uniqueArray("rentalLink");
    }
    /**
     * uniquePackageLinks
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniquePackageLinks(): array
    {
        return parent::uniqueArray("packageLink");
    }
    /**
     * uniquePorts
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniquePorts(): array
    {
        return parent::uniqueArray("port");
    }
    /**
     * uniqueNeedWorks
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueNeedWorks(): array
    {
        return parent::uniqueArray("needWork");
    }
    /**
     * uniqueAdminUsernames
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueAdminUsernames(): array
    {
        return parent::uniqueArray("adminUsername");
    }
    /**
     * uniqueAdminPasswords
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueAdminPasswords(): array
    {
        return parent::uniqueArray("adminPassword");
    }
    /**
     * uniqueDjPasswords
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueDjPasswords(): array
    {
        return parent::uniqueArray("djPassword");
    }
    /**
     * uniqueStreamUids
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueStreamUids(): array
    {
        return parent::uniqueArray("streamUid");
    }
    /**
     * uniqueMountpoints
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueMountpoints(): array
    {
        return parent::uniqueArray("mountpoint");
    }
    // Loaders
    /**
     * loadById
    */
    public function loadById(
        int $id,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "id",
            $id,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromIds
    */
    public function loadFromIds(array $values): SetsLoadReply
    {
        return $this->loadIndexes("id", $values);
    }
    /**
     * loadByServerLink
    */
    public function loadByServerLink(
        int $serverLink,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "serverLink",
            $serverLink,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromServerLinks
    */
    public function loadFromServerLinks(array $values): SetsLoadReply
    {
        return $this->loadIndexes("serverLink", $values);
    }
    /**
     * loadByRentalLink
    */
    public function loadByRentalLink(
        int $rentalLink,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "rentalLink",
            $rentalLink,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromRentalLinks
    */
    public function loadFromRentalLinks(array $values): SetsLoadReply
    {
        return $this->loadIndexes("rentalLink", $values);
    }
    /**
     * loadByPackageLink
    */
    public function loadByPackageLink(
        int $packageLink,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "packageLink",
            $packageLink,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromPackageLinks
    */
    public function loadFromPackageLinks(array $values): SetsLoadReply
    {
        return $this->loadIndexes("packageLink", $values);
    }
    /**
     * loadByPort
    */
    public function loadByPort(
        int $port,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "port",
            $port,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromPorts
    */
    public function loadFromPorts(array $values): SetsLoadReply
    {
        return $this->loadIndexes("port", $values);
    }
    /**
     * loadByNeedWork
    */
    public function loadByNeedWork(
        bool $needWork,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "needWork",
            $needWork,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromNeedWorks
    */
    public function loadFromNeedWorks(array $values): SetsLoadReply
    {
        return $this->loadIndexes("needWork", $values);
    }
    /**
     * loadByAdminUsername
    */
    public function loadByAdminUsername(
        string $adminUsername,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "adminUsername",
            $adminUsername,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromAdminUsernames
    */
    public function loadFromAdminUsernames(array $values): SetsLoadReply
    {
        return $this->loadIndexes("adminUsername", $values);
    }
    /**
     * loadByAdminPassword
    */
    public function loadByAdminPassword(
        string $adminPassword,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "adminPassword",
            $adminPassword,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromAdminPasswords
    */
    public function loadFromAdminPasswords(array $values): SetsLoadReply
    {
        return $this->loadIndexes("adminPassword", $values);
    }
    /**
     * loadByDjPassword
    */
    public function loadByDjPassword(
        string $djPassword,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "djPassword",
            $djPassword,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromDjPasswords
    */
    public function loadFromDjPasswords(array $values): SetsLoadReply
    {
        return $this->loadIndexes("djPassword", $values);
    }
    /**
     * loadByStreamUid
    */
    public function loadByStreamUid(
        string $streamUid,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "streamUid",
            $streamUid,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromStreamUids
    */
    public function loadFromStreamUids(array $values): SetsLoadReply
    {
        return $this->loadIndexes("streamUid", $values);
    }
    /**
     * loadByMountpoint
    */
    public function loadByMountpoint(
        string $mountpoint,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "mountpoint",
            $mountpoint,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromMountpoints
    */
    public function loadFromMountpoints(array $values): SetsLoadReply
    {
        return $this->loadIndexes("mountpoint", $values);
    }
    // Related loaders
    public function relatedRental(?array $limitFields=null): TestRental
    {
        $ids = $this->uniqueIds();
        $collection = new TestRental();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromStreamLinks($ids);
        return $collection;
    }
    public function relatedPackage(?array $limitFields=null): TestPackage
    {
        $ids = $this->uniquePackageLinks();
        $collection = new TestPackage();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromIds($ids);
        return $collection;
    }
    public function relatedServer(?array $limitFields=null): TestServer
    {
        $ids = $this->uniqueServerLinks();
        $collection = new TestServer();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromIds($ids);
        return $collection;
    }
    public function relatedTransactions(?array $limitFields=null): TestTransactions
    {
        $ids = $this->uniqueIds();
        $collection = new TestTransactions();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromStreamLinks($ids);
        return $collection;
    }
}
