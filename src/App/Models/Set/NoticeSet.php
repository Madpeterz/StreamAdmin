<?php

namespace App\Models\Set;

use YAPF\Framework\Responses\DbObjects\SetsLoadReply as SetsLoadReply;
use YAPF\Framework\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use App\Models\Notice as Notice;
use App\Models\Set\RentalSet as TestRental;
use App\Models\Set\NotecardSet as TestNotecard;
use App\Models\Set\RentalnoticeptoutSet as TestRentalnoticeptout;
use App\Models\Set\NoticenotecardSet as TestNoticenotecard;

// Do not edit this file, rerun gen.php to update!
class NoticeSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("App\\Models\\Notice");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Notice
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Notice
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldName, $value): ?Notice
    {
        return parent::getObjectByField($fieldName, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Notice
    {
        return parent::current();
    }
    /**
     * uniqueIds
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueIds(): array
    {
        return parent::uniqueArray("id");
    }
    /**
     * uniqueNames
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueNames(): array
    {
        return parent::uniqueArray("name");
    }
    /**
     * uniqueImMessages
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueImMessages(): array
    {
        return parent::uniqueArray("imMessage");
    }
    /**
     * uniqueSendObjectIMs
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueSendObjectIMs(): array
    {
        return parent::uniqueArray("sendObjectIM");
    }
    /**
     * uniqueUseBots
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueUseBots(): array
    {
        return parent::uniqueArray("useBot");
    }
    /**
     * uniqueSendNotecards
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueSendNotecards(): array
    {
        return parent::uniqueArray("sendNotecard");
    }
    /**
     * uniqueNotecardDetails
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueNotecardDetails(): array
    {
        return parent::uniqueArray("notecardDetail");
    }
    /**
     * uniqueHoursRemainings
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueHoursRemainings(): array
    {
        return parent::uniqueArray("hoursRemaining");
    }
    /**
     * uniqueNoticeNotecardLinks
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueNoticeNotecardLinks(): array
    {
        return parent::uniqueArray("noticeNotecardLink");
    }
    // Loaders
    /**
     * loadById
    */
    public function loadById(
        int $id,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "id",
            $id,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromIds
    */
    public function loadFromIds(array $values): SetsLoadReply
    {
        return $this->loadIndexes("id", $values);
    }
    /**
     * loadByName
    */
    public function loadByName(
        string $name,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "name",
            $name,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromNames
    */
    public function loadFromNames(array $values): SetsLoadReply
    {
        return $this->loadIndexes("name", $values);
    }
    /**
     * loadByImMessage
    */
    public function loadByImMessage(
        string $imMessage,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "imMessage",
            $imMessage,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromImMessages
    */
    public function loadFromImMessages(array $values): SetsLoadReply
    {
        return $this->loadIndexes("imMessage", $values);
    }
    /**
     * loadBySendObjectIM
    */
    public function loadBySendObjectIM(
        bool $sendObjectIM,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "sendObjectIM",
            $sendObjectIM,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromSendObjectIMs
    */
    public function loadFromSendObjectIMs(array $values): SetsLoadReply
    {
        return $this->loadIndexes("sendObjectIM", $values);
    }
    /**
     * loadByUseBot
    */
    public function loadByUseBot(
        bool $useBot,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "useBot",
            $useBot,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromUseBots
    */
    public function loadFromUseBots(array $values): SetsLoadReply
    {
        return $this->loadIndexes("useBot", $values);
    }
    /**
     * loadBySendNotecard
    */
    public function loadBySendNotecard(
        bool $sendNotecard,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "sendNotecard",
            $sendNotecard,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromSendNotecards
    */
    public function loadFromSendNotecards(array $values): SetsLoadReply
    {
        return $this->loadIndexes("sendNotecard", $values);
    }
    /**
     * loadByNotecardDetail
    */
    public function loadByNotecardDetail(
        string $notecardDetail,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "notecardDetail",
            $notecardDetail,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromNotecardDetails
    */
    public function loadFromNotecardDetails(array $values): SetsLoadReply
    {
        return $this->loadIndexes("notecardDetail", $values);
    }
    /**
     * loadByHoursRemaining
    */
    public function loadByHoursRemaining(
        int $hoursRemaining,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "hoursRemaining",
            $hoursRemaining,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromHoursRemainings
    */
    public function loadFromHoursRemainings(array $values): SetsLoadReply
    {
        return $this->loadIndexes("hoursRemaining", $values);
    }
    /**
     * loadByNoticeNotecardLink
    */
    public function loadByNoticeNotecardLink(
        int $noticeNotecardLink,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "noticeNotecardLink",
            $noticeNotecardLink,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromNoticeNotecardLinks
    */
    public function loadFromNoticeNotecardLinks(array $values): SetsLoadReply
    {
        return $this->loadIndexes("noticeNotecardLink", $values);
    }
    // Related loaders
    public function relatedRental(?array $limitFields=null): TestRental
    {
        $ids = $this->uniqueIds();
        $collection = new TestRental();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromNoticeLinks($ids);
        return $collection;
    }
    public function relatedNotecard(?array $limitFields=null): TestNotecard
    {
        $ids = $this->uniqueIds();
        $collection = new TestNotecard();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromNoticeLinks($ids);
        return $collection;
    }
    public function relatedRentalnoticeptout(?array $limitFields=null): TestRentalnoticeptout
    {
        $ids = $this->uniqueIds();
        $collection = new TestRentalnoticeptout();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromNoticeLinks($ids);
        return $collection;
    }
    public function relatedNoticenotecard(?array $limitFields=null): TestNoticenotecard
    {
        $ids = $this->uniqueNoticeNotecardLinks();
        $collection = new TestNoticenotecard();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromIds($ids);
        return $collection;
    }
}
