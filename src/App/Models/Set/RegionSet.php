<?php

namespace App\Models\Set;

use YAPF\Framework\Responses\DbObjects\SetsLoadReply as SetsLoadReply;
use YAPF\Framework\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use App\Models\Region as Region;
use App\Models\Set\ObjectsSet as TestObjects;
use App\Models\Set\TransactionsSet as TestTransactions;

// Do not edit this file, rerun gen.php to update!
class RegionSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("App\\Models\\Region");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Region
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Region
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldName, $value): ?Region
    {
        return parent::getObjectByField($fieldName, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Region
    {
        return parent::current();
    }
    /**
     * uniqueIds
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueIds(): array
    {
        return parent::uniqueArray("id");
    }
    /**
     * uniqueNames
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueNames(): array
    {
        return parent::uniqueArray("name");
    }
    // Loaders
    /**
     * loadById
    */
    public function loadById(
        int $id,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "id",
            $id,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromIds
    */
    public function loadFromIds(array $values): SetsLoadReply
    {
        return $this->loadIndexes("id", $values);
    }
    /**
     * loadByName
    */
    public function loadByName(
        string $name,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "name",
            $name,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromNames
    */
    public function loadFromNames(array $values): SetsLoadReply
    {
        return $this->loadIndexes("name", $values);
    }
    // Related loaders
    public function relatedObjects(?array $limitFields=null): TestObjects
    {
        $ids = $this->uniqueIds();
        $collection = new TestObjects();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromRegionLinks($ids);
        return $collection;
    }
    public function relatedTransactions(?array $limitFields=null): TestTransactions
    {
        $ids = $this->uniqueIds();
        $collection = new TestTransactions();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromRegionLinks($ids);
        return $collection;
    }
}
