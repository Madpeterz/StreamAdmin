<?php

namespace App\Models\Set;

use YAPF\Framework\Responses\DbObjects\SetsLoadReply as SetsLoadReply;
use YAPF\Framework\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use App\Models\Noticenotecard as Noticenotecard;
use App\Models\Set\NotecardmailSet as TestNotecardmail;
use App\Models\Set\PackageSet as TestPackage;
use App\Models\Set\NoticeSet as TestNotice;

// Do not edit this file, rerun gen.php to update!
class NoticenotecardSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("App\\Models\\Noticenotecard");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Noticenotecard
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Noticenotecard
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldName, $value): ?Noticenotecard
    {
        return parent::getObjectByField($fieldName, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Noticenotecard
    {
        return parent::current();
    }
    /**
     * uniqueIds
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueIds(): array
    {
        return parent::uniqueArray("id");
    }
    /**
     * uniqueNames
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueNames(): array
    {
        return parent::uniqueArray("name");
    }
    /**
     * uniqueMissings
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueMissings(): array
    {
        return parent::uniqueArray("missing");
    }
    // Loaders
    /**
     * loadById
    */
    public function loadById(
        int $id,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "id",
            $id,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromIds
    */
    public function loadFromIds(array $values): SetsLoadReply
    {
        return $this->loadIndexes("id", $values);
    }
    /**
     * loadByName
    */
    public function loadByName(
        string $name,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "name",
            $name,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromNames
    */
    public function loadFromNames(array $values): SetsLoadReply
    {
        return $this->loadIndexes("name", $values);
    }
    /**
     * loadByMissing
    */
    public function loadByMissing(
        bool $missing,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "missing",
            $missing,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromMissings
    */
    public function loadFromMissings(array $values): SetsLoadReply
    {
        return $this->loadIndexes("missing", $values);
    }
    // Related loaders
    public function relatedNotecardmail(?array $limitFields=null): TestNotecardmail
    {
        $ids = $this->uniqueIds();
        $collection = new TestNotecardmail();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromNoticenotecardLinks($ids);
        return $collection;
    }
    public function relatedPackage(?array $limitFields=null): TestPackage
    {
        $ids = $this->uniqueIds();
        $collection = new TestPackage();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromWelcomeNotecardLinks($ids);
        return $collection;
    }
    public function relatedNotice(?array $limitFields=null): TestNotice
    {
        $ids = $this->uniqueIds();
        $collection = new TestNotice();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromNoticeNotecardLinks($ids);
        return $collection;
    }
}
