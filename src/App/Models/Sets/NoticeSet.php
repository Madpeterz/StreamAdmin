<?php

namespace App\Models\Sets;

use YAPF\Framework\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use App\Models\Notice as Notice;

// Do not edit this file, rerun gen.php to update!
class NoticeSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("App\Models\Notice");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Notice
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Notice
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldname, $value): ?Notice
    {
        return parent::getObjectByField($fieldname, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Notice
    {
        return parent::current();
    }
    /**
     * uniqueIds
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueIds(): array
    {
        return parent::uniqueArray("id");
    }
    /**
     * uniqueNames
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueNames(): array
    {
        return parent::uniqueArray("name");
    }
    /**
     * uniqueImMessages
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueImMessages(): array
    {
        return parent::uniqueArray("imMessage");
    }
    /**
     * uniqueSendObjectIMs
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueSendObjectIMs(): array
    {
        return parent::uniqueArray("sendObjectIM");
    }
    /**
     * uniqueUseBots
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueUseBots(): array
    {
        return parent::uniqueArray("useBot");
    }
    /**
     * uniqueSendNotecards
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueSendNotecards(): array
    {
        return parent::uniqueArray("sendNotecard");
    }
    /**
     * uniqueNotecardDetails
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueNotecardDetails(): array
    {
        return parent::uniqueArray("notecardDetail");
    }
    /**
     * uniqueHoursRemainings
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueHoursRemainings(): array
    {
        return parent::uniqueArray("hoursRemaining");
    }
    /**
     * uniqueNoticeNotecardLinks
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueNoticeNotecardLinks(): array
    {
        return parent::uniqueArray("noticeNotecardLink");
    }
    // Loaders
    /**
     * loadById
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadById(
        int $id, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "id", 
            $id, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromIds
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromIds(array $values): array
    {
        return $this->loadIndexs("id", $values);
    }
    /**
     * loadByName
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByName(
        string $name, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "name", 
            $name, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromNames
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromNames(array $values): array
    {
        return $this->loadIndexs("name", $values);
    }
    /**
     * loadByImMessage
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByImMessage(
        string $imMessage, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "imMessage", 
            $imMessage, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromImMessages
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromImMessages(array $values): array
    {
        return $this->loadIndexs("imMessage", $values);
    }
    /**
     * loadBySendObjectIM
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadBySendObjectIM(
        bool $sendObjectIM, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "sendObjectIM", 
            $sendObjectIM, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromSendObjectIMs
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromSendObjectIMs(array $values): array
    {
        return $this->loadIndexs("sendObjectIM", $values);
    }
    /**
     * loadByUseBot
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByUseBot(
        bool $useBot, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "useBot", 
            $useBot, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromUseBots
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromUseBots(array $values): array
    {
        return $this->loadIndexs("useBot", $values);
    }
    /**
     * loadBySendNotecard
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadBySendNotecard(
        bool $sendNotecard, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "sendNotecard", 
            $sendNotecard, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromSendNotecards
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromSendNotecards(array $values): array
    {
        return $this->loadIndexs("sendNotecard", $values);
    }
    /**
     * loadByNotecardDetail
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByNotecardDetail(
        string $notecardDetail, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "notecardDetail", 
            $notecardDetail, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromNotecardDetails
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromNotecardDetails(array $values): array
    {
        return $this->loadIndexs("notecardDetail", $values);
    }
    /**
     * loadByHoursRemaining
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByHoursRemaining(
        int $hoursRemaining, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "hoursRemaining", 
            $hoursRemaining, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromHoursRemainings
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromHoursRemainings(array $values): array
    {
        return $this->loadIndexs("hoursRemaining", $values);
    }
    /**
     * loadByNoticeNotecardLink
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByNoticeNotecardLink(
        int $noticeNotecardLink, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "noticeNotecardLink", 
            $noticeNotecardLink, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromNoticeNotecardLinks
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromNoticeNotecardLinks(array $values): array
    {
        return $this->loadIndexs("noticeNotecardLink", $values);
    }
    // Related loaders
    public function relatedNotecard(): NotecardSet
    {
        $ids = $this->uniqueIds();
        $collection = new NotecardSet();
        $collection->loadFromNoticeLinks($ids);
        return $collection;
    }
    public function relatedNoticenotecard(): NoticenotecardSet
    {
        $ids = $this->uniqueNoticeNotecardLinks();
        $collection = new NoticenotecardSet();
        $collection->loadFromIds($ids);
        return $collection;
    }
    public function relatedRental(): RentalSet
    {
        $ids = $this->uniqueIds();
        $collection = new RentalSet();
        $collection->loadFromNoticeLinks($ids);
        return $collection;
    }
    public function relatedRentalnoticeptout(): RentalnoticeptoutSet
    {
        $ids = $this->uniqueIds();
        $collection = new RentalnoticeptoutSet();
        $collection->loadFromNoticeLinks($ids);
        return $collection;
    }
}
