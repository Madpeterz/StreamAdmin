<?php

namespace App\Models\Sets;

use YAPF\Framework\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use App\Models\Textureconfig as Textureconfig;

// Do not edit this file, rerun gen.php to update!
class TextureconfigSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("App\Models\Textureconfig");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Textureconfig
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Textureconfig
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldname, $value): ?Textureconfig
    {
        return parent::getObjectByField($fieldname, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Textureconfig
    {
        return parent::current();
    }
    /**
     * uniqueIds
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueIds(): array
    {
        return parent::uniqueArray("id");
    }
    /**
     * uniqueNames
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueNames(): array
    {
        return parent::uniqueArray("name");
    }
    /**
     * uniqueOfflines
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueOfflines(): array
    {
        return parent::uniqueArray("offline");
    }
    /**
     * uniqueWaitOwners
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueWaitOwners(): array
    {
        return parent::uniqueArray("waitOwner");
    }
    /**
     * uniqueStockLevelss
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueStockLevelss(): array
    {
        return parent::uniqueArray("stockLevels");
    }
    /**
     * uniqueMakePayments
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueMakePayments(): array
    {
        return parent::uniqueArray("makePayment");
    }
    /**
     * uniqueInUses
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueInUses(): array
    {
        return parent::uniqueArray("inUse");
    }
    /**
     * uniqueRenewHeres
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueRenewHeres(): array
    {
        return parent::uniqueArray("renewHere");
    }
    /**
     * uniqueProxyRenews
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueProxyRenews(): array
    {
        return parent::uniqueArray("proxyRenew");
    }
    /**
     * uniqueGettingDetailss
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueGettingDetailss(): array
    {
        return parent::uniqueArray("gettingDetails");
    }
    /**
     * uniqueRequestDetailss
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueRequestDetailss(): array
    {
        return parent::uniqueArray("requestDetails");
    }
    // Loaders
    /**
     * loadById
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadById(
        int $id, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "id", 
            $id, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromIds
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromIds(array $values): array
    {
        return $this->loadIndexs("id", $values);
    }
    /**
     * loadByName
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByName(
        string $name, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "name", 
            $name, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromNames
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromNames(array $values): array
    {
        return $this->loadIndexs("name", $values);
    }
    /**
     * loadByOffline
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByOffline(
        string $offline, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "offline", 
            $offline, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromOfflines
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromOfflines(array $values): array
    {
        return $this->loadIndexs("offline", $values);
    }
    /**
     * loadByWaitOwner
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByWaitOwner(
        string $waitOwner, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "waitOwner", 
            $waitOwner, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromWaitOwners
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromWaitOwners(array $values): array
    {
        return $this->loadIndexs("waitOwner", $values);
    }
    /**
     * loadByStockLevels
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByStockLevels(
        string $stockLevels, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "stockLevels", 
            $stockLevels, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromStockLevelss
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromStockLevelss(array $values): array
    {
        return $this->loadIndexs("stockLevels", $values);
    }
    /**
     * loadByMakePayment
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByMakePayment(
        string $makePayment, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "makePayment", 
            $makePayment, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromMakePayments
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromMakePayments(array $values): array
    {
        return $this->loadIndexs("makePayment", $values);
    }
    /**
     * loadByInUse
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByInUse(
        string $inUse, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "inUse", 
            $inUse, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromInUses
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromInUses(array $values): array
    {
        return $this->loadIndexs("inUse", $values);
    }
    /**
     * loadByRenewHere
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByRenewHere(
        string $renewHere, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "renewHere", 
            $renewHere, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromRenewHeres
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromRenewHeres(array $values): array
    {
        return $this->loadIndexs("renewHere", $values);
    }
    /**
     * loadByProxyRenew
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByProxyRenew(
        string $proxyRenew, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "proxyRenew", 
            $proxyRenew, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromProxyRenews
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromProxyRenews(array $values): array
    {
        return $this->loadIndexs("proxyRenew", $values);
    }
    /**
     * loadByGettingDetails
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByGettingDetails(
        string $gettingDetails, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "gettingDetails", 
            $gettingDetails, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromGettingDetailss
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromGettingDetailss(array $values): array
    {
        return $this->loadIndexs("gettingDetails", $values);
    }
    /**
     * loadByRequestDetails
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByRequestDetails(
        string $requestDetails, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "requestDetails", 
            $requestDetails, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromRequestDetailss
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromRequestDetailss(array $values): array
    {
        return $this->loadIndexs("requestDetails", $values);
    }
    // Related loaders
}
