<?php

namespace App\Models\Sets;

use YAPF\Framework\Responses\DbObjects\SetsLoadReply as SetsLoadReply;
use YAPF\Framework\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use YAPF\Framework\Responses\DbObjects\UpdateReply as UpdateReply;
use App\Models\Botconfig as Botconfig;

// Do not edit this file, rerun gen.php to update!
class BotconfigSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("App\Models\Botconfig");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Botconfig
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Botconfig
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldName, $value): ?Botconfig
    {
        return parent::getObjectByField($fieldName, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Botconfig
    {
        return parent::current();
    }
    /**
     * uniqueIds
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueIds(): array
    {
        return parent::uniqueArray("id");
    }
    /**
     * uniqueAvatarLinks
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueAvatarLinks(): array
    {
        return parent::uniqueArray("avatarLink");
    }
    /**
     * uniqueSecrets
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueSecrets(): array
    {
        return parent::uniqueArray("secret");
    }
    /**
     * uniqueNotecardss
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueNotecardss(): array
    {
        return parent::uniqueArray("notecards");
    }
    /**
     * uniqueImss
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueImss(): array
    {
        return parent::uniqueArray("ims");
    }
    /**
     * uniqueInvitess
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueInvitess(): array
    {
        return parent::uniqueArray("invites");
    }
    /**
     * uniqueInviteGroupUUIDs
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueInviteGroupUUIDs(): array
    {
        return parent::uniqueArray("inviteGroupUUID");
    }
    /**
     * uniqueHttpModes
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueHttpModes(): array
    {
        return parent::uniqueArray("httpMode");
    }
    /**
     * uniqueHttpURLs
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueHttpURLs(): array
    {
        return parent::uniqueArray("httpURL");
    }
    // Loaders
    /**
     * loadById
    */
    public function loadById(
        int $id,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "id",
            $id,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromIds
    */
    public function loadFromIds(array $values): SetsLoadReply
    {
        return $this->loadIndexes("id", $values);
    }
    /**
     * loadByAvatarLink
    */
    public function loadByAvatarLink(
        int $avatarLink,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "avatarLink",
            $avatarLink,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromAvatarLinks
    */
    public function loadFromAvatarLinks(array $values): SetsLoadReply
    {
        return $this->loadIndexes("avatarLink", $values);
    }
    /**
     * loadBySecret
    */
    public function loadBySecret(
        string $secret,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "secret",
            $secret,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromSecrets
    */
    public function loadFromSecrets(array $values): SetsLoadReply
    {
        return $this->loadIndexes("secret", $values);
    }
    /**
     * loadByNotecards
    */
    public function loadByNotecards(
        bool $notecards,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "notecards",
            $notecards,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromNotecardss
    */
    public function loadFromNotecardss(array $values): SetsLoadReply
    {
        return $this->loadIndexes("notecards", $values);
    }
    /**
     * loadByIms
    */
    public function loadByIms(
        bool $ims,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "ims",
            $ims,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromImss
    */
    public function loadFromImss(array $values): SetsLoadReply
    {
        return $this->loadIndexes("ims", $values);
    }
    /**
     * loadByInvites
    */
    public function loadByInvites(
        bool $invites,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "invites",
            $invites,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromInvitess
    */
    public function loadFromInvitess(array $values): SetsLoadReply
    {
        return $this->loadIndexes("invites", $values);
    }
    /**
     * loadByInviteGroupUUID
    */
    public function loadByInviteGroupUUID(
        string $inviteGroupUUID,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "inviteGroupUUID",
            $inviteGroupUUID,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromInviteGroupUUIDs
    */
    public function loadFromInviteGroupUUIDs(array $values): SetsLoadReply
    {
        return $this->loadIndexes("inviteGroupUUID", $values);
    }
    /**
     * loadByHttpMode
    */
    public function loadByHttpMode(
        bool $httpMode,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "httpMode",
            $httpMode,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromHttpModes
    */
    public function loadFromHttpModes(array $values): SetsLoadReply
    {
        return $this->loadIndexes("httpMode", $values);
    }
    /**
     * loadByHttpURL
    */
    public function loadByHttpURL(
        string $httpURL,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "httpURL",
            $httpURL,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromHttpURLs
    */
    public function loadFromHttpURLs(array $values): SetsLoadReply
    {
        return $this->loadIndexes("httpURL", $values);
    }
    // Related loaders
    public function relatedAvatar(?array $limitFields = null): AvatarSet
    {
        $ids = $this->uniqueAvatarLinks();
        $collection = new AvatarSet();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromIds($ids);
        return $collection;
    }
}
