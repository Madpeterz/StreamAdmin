<?php

namespace App\Models\Sets;

use YAPF\Framework\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use App\Models\Botconfig as Botconfig;

// Do not edit this file, rerun gen.php to update!
class BotconfigSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("App\Models\Botconfig");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Botconfig
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Botconfig
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldname, $value): ?Botconfig
    {
        return parent::getObjectByField($fieldname, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Botconfig
    {
        return parent::current();
    }
    /**
     * uniqueIds
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueIds(): array
    {
        return parent::uniqueArray("id");
    }
    /**
     * uniqueAvatarLinks
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueAvatarLinks(): array
    {
        return parent::uniqueArray("avatarLink");
    }
    /**
     * uniqueSecrets
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueSecrets(): array
    {
        return parent::uniqueArray("secret");
    }
    /**
     * uniqueNotecardss
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueNotecardss(): array
    {
        return parent::uniqueArray("notecards");
    }
    /**
     * uniqueImss
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueImss(): array
    {
        return parent::uniqueArray("ims");
    }
    /**
     * uniqueInvitess
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueInvitess(): array
    {
        return parent::uniqueArray("invites");
    }
    /**
     * uniqueInviteGroupUUIDs
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueInviteGroupUUIDs(): array
    {
        return parent::uniqueArray("inviteGroupUUID");
    }
    /**
     * uniqueHttpModes
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueHttpModes(): array
    {
        return parent::uniqueArray("httpMode");
    }
    /**
     * uniqueHttpURLs
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueHttpURLs(): array
    {
        return parent::uniqueArray("httpURL");
    }
    /**
     * uniqueHttpTokens
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueHttpTokens(): array
    {
        return parent::uniqueArray("httpToken");
    }
    // Loaders
    /**
     * loadById
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadById(
        int $id, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "id", 
            $id, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromIds
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromIds(array $values): array
    {
        return $this->loadIndexs("id", $values);
    }
    /**
     * loadByAvatarLink
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByAvatarLink(
        int $avatarLink, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "avatarLink", 
            $avatarLink, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromAvatarLinks
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromAvatarLinks(array $values): array
    {
        return $this->loadIndexs("avatarLink", $values);
    }
    /**
     * loadBySecret
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadBySecret(
        string $secret, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "secret", 
            $secret, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromSecrets
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromSecrets(array $values): array
    {
        return $this->loadIndexs("secret", $values);
    }
    /**
     * loadByNotecards
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByNotecards(
        bool $notecards, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "notecards", 
            $notecards, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromNotecardss
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromNotecardss(array $values): array
    {
        return $this->loadIndexs("notecards", $values);
    }
    /**
     * loadByIms
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByIms(
        bool $ims, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "ims", 
            $ims, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromImss
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromImss(array $values): array
    {
        return $this->loadIndexs("ims", $values);
    }
    /**
     * loadByInvites
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByInvites(
        bool $invites, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "invites", 
            $invites, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromInvitess
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromInvitess(array $values): array
    {
        return $this->loadIndexs("invites", $values);
    }
    /**
     * loadByInviteGroupUUID
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByInviteGroupUUID(
        string $inviteGroupUUID, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "inviteGroupUUID", 
            $inviteGroupUUID, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromInviteGroupUUIDs
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromInviteGroupUUIDs(array $values): array
    {
        return $this->loadIndexs("inviteGroupUUID", $values);
    }
    /**
     * loadByHttpMode
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByHttpMode(
        bool $httpMode, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "httpMode", 
            $httpMode, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromHttpModes
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromHttpModes(array $values): array
    {
        return $this->loadIndexs("httpMode", $values);
    }
    /**
     * loadByHttpURL
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByHttpURL(
        string $httpURL, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "httpURL", 
            $httpURL, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromHttpURLs
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromHttpURLs(array $values): array
    {
        return $this->loadIndexs("httpURL", $values);
    }
    /**
     * loadByHttpToken
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByHttpToken(
        string $httpToken, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "httpToken", 
            $httpToken, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromHttpTokens
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromHttpTokens(array $values): array
    {
        return $this->loadIndexs("httpToken", $values);
    }
    // Related loaders
    public function relatedAvatar(): AvatarSet
    {
        $ids = $this->uniqueAvatarLinks();
        $collection = new AvatarSet();
        $collection->loadFromIds($ids);
        return $collection;
    }
}
