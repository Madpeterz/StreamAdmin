<?php

namespace App\Models\Sets;

use YAPF\Framework\Responses\DbObjects\SetsLoadReply as SetsLoadReply;
use YAPF\Framework\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use YAPF\Framework\Responses\DbObjects\UpdateReply as UpdateReply;
use App\Models\Treevender as Treevender;

// Do not edit this file, rerun gen.php to update!
class TreevenderSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("App\Models\Treevender");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Treevender
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Treevender
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldName, $value): ?Treevender
    {
        return parent::getObjectByField($fieldName, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Treevender
    {
        return parent::current();
    }
    /**
     * uniqueIds
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueIds(): array
    {
        return parent::uniqueArray("id");
    }
    /**
     * uniqueNames
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueNames(): array
    {
        return parent::uniqueArray("name");
    }
    /**
     * uniqueTextureWaitings
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueTextureWaitings(): array
    {
        return parent::uniqueArray("textureWaiting");
    }
    /**
     * uniqueTextureInuses
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueTextureInuses(): array
    {
        return parent::uniqueArray("textureInuse");
    }
    /**
     * uniqueHideSoldouts
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueHideSoldouts(): array
    {
        return parent::uniqueArray("hideSoldout");
    }
    // Loaders
    /**
     * loadById
    */
    public function loadById(
        int $id, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): SetsLoadReply
    {
        return $this->loadOnField(
            "id", 
            $id, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromIds
    */
    public function loadFromIds(array $values): SetsLoadReply
    {
        return $this->loadIndexes("id", $values);
    }
    /**
     * loadByName
    */
    public function loadByName(
        string $name, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): SetsLoadReply
    {
        return $this->loadOnField(
            "name", 
            $name, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromNames
    */
    public function loadFromNames(array $values): SetsLoadReply
    {
        return $this->loadIndexes("name", $values);
    }
    /**
     * loadByTextureWaiting
    */
    public function loadByTextureWaiting(
        string $textureWaiting, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): SetsLoadReply
    {
        return $this->loadOnField(
            "textureWaiting", 
            $textureWaiting, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromTextureWaitings
    */
    public function loadFromTextureWaitings(array $values): SetsLoadReply
    {
        return $this->loadIndexes("textureWaiting", $values);
    }
    /**
     * loadByTextureInuse
    */
    public function loadByTextureInuse(
        string $textureInuse, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): SetsLoadReply
    {
        return $this->loadOnField(
            "textureInuse", 
            $textureInuse, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromTextureInuses
    */
    public function loadFromTextureInuses(array $values): SetsLoadReply
    {
        return $this->loadIndexes("textureInuse", $values);
    }
    /**
     * loadByHideSoldout
    */
    public function loadByHideSoldout(
        bool $hideSoldout, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): SetsLoadReply
    {
        return $this->loadOnField(
            "hideSoldout", 
            $hideSoldout, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromHideSoldouts
    */
    public function loadFromHideSoldouts(array $values): SetsLoadReply
    {
        return $this->loadIndexes("hideSoldout", $values);
    }
    // Related loaders
    public function relatedTreevenderpackages(): TreevenderpackagesSet
    {
        $ids = $this->uniqueIds();
        $collection = new TreevenderpackagesSet();
        $collection->loadFromTreevenderLinks($ids);
        return $collection;
    }
}
