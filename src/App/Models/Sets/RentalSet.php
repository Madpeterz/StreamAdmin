<?php

namespace App\Models\Sets;

use YAPF\Framework\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use App\Models\Rental as Rental;

// Do not edit this file, rerun gen.php to update!
class RentalSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("App\Models\Rental");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Rental
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Rental
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldname, $value): ?Rental
    {
        return parent::getObjectByField($fieldname, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Rental
    {
        return parent::current();
    }
    /**
     * uniqueIds
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueIds(): array
    {
        return parent::uniqueArray("id");
    }
    /**
     * uniqueAvatarLinks
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueAvatarLinks(): array
    {
        return parent::uniqueArray("avatarLink");
    }
    /**
     * uniqueStreamLinks
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueStreamLinks(): array
    {
        return parent::uniqueArray("streamLink");
    }
    /**
     * uniquePackageLinks
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniquePackageLinks(): array
    {
        return parent::uniqueArray("packageLink");
    }
    /**
     * uniqueNoticeLinks
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueNoticeLinks(): array
    {
        return parent::uniqueArray("noticeLink");
    }
    /**
     * uniqueStartUnixtimes
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueStartUnixtimes(): array
    {
        return parent::uniqueArray("startUnixtime");
    }
    /**
     * uniqueExpireUnixtimes
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueExpireUnixtimes(): array
    {
        return parent::uniqueArray("expireUnixtime");
    }
    /**
     * uniqueRenewalss
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueRenewalss(): array
    {
        return parent::uniqueArray("renewals");
    }
    /**
     * uniqueTotalAmounts
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueTotalAmounts(): array
    {
        return parent::uniqueArray("totalAmount");
    }
    /**
     * uniqueMessages
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueMessages(): array
    {
        return parent::uniqueArray("message");
    }
    /**
     * uniqueRentalUids
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueRentalUids(): array
    {
        return parent::uniqueArray("rentalUid");
    }
    /**
     * uniqueApiAllowAutoSuspends
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueApiAllowAutoSuspends(): array
    {
        return parent::uniqueArray("apiAllowAutoSuspend");
    }
    /**
     * uniqueApiSuspendeds
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueApiSuspendeds(): array
    {
        return parent::uniqueArray("apiSuspended");
    }
    /**
     * uniqueApiPendingAutoSuspends
     * returns unique values from the collection matching that field
     * @return array<bool>
     */
    public function uniqueApiPendingAutoSuspends(): array
    {
        return parent::uniqueArray("apiPendingAutoSuspend");
    }
    /**
     * uniqueApiPendingAutoSuspendAfters
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueApiPendingAutoSuspendAfters(): array
    {
        return parent::uniqueArray("apiPendingAutoSuspendAfter");
    }
    // Loaders
    /**
     * loadById
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadById(
        int $id, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "id", 
            $id, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromIds
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromIds(array $values): array
    {
        return $this->loadIndexs("id", $values);
    }
    /**
     * loadByAvatarLink
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByAvatarLink(
        int $avatarLink, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "avatarLink", 
            $avatarLink, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromAvatarLinks
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromAvatarLinks(array $values): array
    {
        return $this->loadIndexs("avatarLink", $values);
    }
    /**
     * loadByStreamLink
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByStreamLink(
        int $streamLink, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "streamLink", 
            $streamLink, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromStreamLinks
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromStreamLinks(array $values): array
    {
        return $this->loadIndexs("streamLink", $values);
    }
    /**
     * loadByPackageLink
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByPackageLink(
        int $packageLink, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "packageLink", 
            $packageLink, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromPackageLinks
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromPackageLinks(array $values): array
    {
        return $this->loadIndexs("packageLink", $values);
    }
    /**
     * loadByNoticeLink
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByNoticeLink(
        int $noticeLink, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "noticeLink", 
            $noticeLink, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromNoticeLinks
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromNoticeLinks(array $values): array
    {
        return $this->loadIndexs("noticeLink", $values);
    }
    /**
     * loadByStartUnixtime
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByStartUnixtime(
        int $startUnixtime, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "startUnixtime", 
            $startUnixtime, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromStartUnixtimes
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromStartUnixtimes(array $values): array
    {
        return $this->loadIndexs("startUnixtime", $values);
    }
    /**
     * loadByExpireUnixtime
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByExpireUnixtime(
        int $expireUnixtime, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "expireUnixtime", 
            $expireUnixtime, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromExpireUnixtimes
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromExpireUnixtimes(array $values): array
    {
        return $this->loadIndexs("expireUnixtime", $values);
    }
    /**
     * loadByRenewals
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByRenewals(
        int $renewals, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "renewals", 
            $renewals, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromRenewalss
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromRenewalss(array $values): array
    {
        return $this->loadIndexs("renewals", $values);
    }
    /**
     * loadByTotalAmount
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByTotalAmount(
        int $totalAmount, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "totalAmount", 
            $totalAmount, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromTotalAmounts
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromTotalAmounts(array $values): array
    {
        return $this->loadIndexs("totalAmount", $values);
    }
    /**
     * loadByMessage
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByMessage(
        string $message, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "message", 
            $message, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromMessages
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromMessages(array $values): array
    {
        return $this->loadIndexs("message", $values);
    }
    /**
     * loadByRentalUid
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByRentalUid(
        string $rentalUid, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "rentalUid", 
            $rentalUid, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromRentalUids
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromRentalUids(array $values): array
    {
        return $this->loadIndexs("rentalUid", $values);
    }
    /**
     * loadByApiAllowAutoSuspend
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByApiAllowAutoSuspend(
        bool $apiAllowAutoSuspend, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "apiAllowAutoSuspend", 
            $apiAllowAutoSuspend, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromApiAllowAutoSuspends
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromApiAllowAutoSuspends(array $values): array
    {
        return $this->loadIndexs("apiAllowAutoSuspend", $values);
    }
    /**
     * loadByApiSuspended
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByApiSuspended(
        bool $apiSuspended, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "apiSuspended", 
            $apiSuspended, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromApiSuspendeds
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromApiSuspendeds(array $values): array
    {
        return $this->loadIndexs("apiSuspended", $values);
    }
    /**
     * loadByApiPendingAutoSuspend
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByApiPendingAutoSuspend(
        bool $apiPendingAutoSuspend, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "apiPendingAutoSuspend", 
            $apiPendingAutoSuspend, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromApiPendingAutoSuspends
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromApiPendingAutoSuspends(array $values): array
    {
        return $this->loadIndexs("apiPendingAutoSuspend", $values);
    }
    /**
     * loadByApiPendingAutoSuspendAfter
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByApiPendingAutoSuspendAfter(
        int $apiPendingAutoSuspendAfter, 
        int $limit = 0, 
        string $orderBy = "id", 
        string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField(
            "apiPendingAutoSuspendAfter", 
            $apiPendingAutoSuspendAfter, 
            $limit, 
            $orderBy, 
            $orderDir
        );
    }
    /**
     * loadFromApiPendingAutoSuspendAfters
     * @return array<mixed> [status =>  bool, count => integer, message =>  string]
    */
    public function loadFromApiPendingAutoSuspendAfters(array $values): array
    {
        return $this->loadIndexs("apiPendingAutoSuspendAfter", $values);
    }
    // Related loaders
    public function relatedDetail(): DetailSet
    {
        $ids = $this->uniqueIds();
        $collection = new DetailSet();
        $collection->loadFromRentalLinks($ids);
        return $collection;
    }
    public function relatedNotecard(): NotecardSet
    {
        $ids = $this->uniqueIds();
        $collection = new NotecardSet();
        $collection->loadFromRentalLinks($ids);
        return $collection;
    }
    public function relatedAvatar(): AvatarSet
    {
        $ids = $this->uniqueAvatarLinks();
        $collection = new AvatarSet();
        $collection->loadFromIds($ids);
        return $collection;
    }
    public function relatedNotice(): NoticeSet
    {
        $ids = $this->uniqueNoticeLinks();
        $collection = new NoticeSet();
        $collection->loadFromIds($ids);
        return $collection;
    }
    public function relatedPackage(): PackageSet
    {
        $ids = $this->uniquePackageLinks();
        $collection = new PackageSet();
        $collection->loadFromIds($ids);
        return $collection;
    }
    public function relatedStream(): StreamSet
    {
        $ids = $this->uniqueStreamLinks();
        $collection = new StreamSet();
        $collection->loadFromIds($ids);
        return $collection;
    }
    public function relatedRentalnoticeptout(): RentalnoticeptoutSet
    {
        $ids = $this->uniqueIds();
        $collection = new RentalnoticeptoutSet();
        $collection->loadFromRentalLinks($ids);
        return $collection;
    }
}
