<?php

namespace App\Models\Sets;

use YAPF\Framework\Responses\DbObjects\SetsLoadReply as SetsLoadReply;
use YAPF\Framework\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use YAPF\Framework\Responses\DbObjects\UpdateReply as UpdateReply;
use App\Models\Avatar as Avatar;

// Do not edit this file, rerun gen.php to update!
class AvatarSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("App\Models\Avatar");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Avatar
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Avatar
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldName, $value): ?Avatar
    {
        return parent::getObjectByField($fieldName, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Avatar
    {
        return parent::current();
    }
    /**
     * uniqueIds
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueIds(): array
    {
        return parent::uniqueArray("id");
    }
    /**
     * uniqueAvatarUUIDs
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueAvatarUUIDs(): array
    {
        return parent::uniqueArray("avatarUUID");
    }
    /**
     * uniqueAvatarNames
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueAvatarNames(): array
    {
        return parent::uniqueArray("avatarName");
    }
    /**
     * uniqueAvatarUids
     * returns unique values from the collection matching that field
     * @return array<string>
     */
    public function uniqueAvatarUids(): array
    {
        return parent::uniqueArray("avatarUid");
    }
    /**
     * uniqueLastUseds
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueLastUseds(): array
    {
        return parent::uniqueArray("lastUsed");
    }
    /**
     * uniqueCreditss
     * returns unique values from the collection matching that field
     * @return array<int>
     */
    public function uniqueCreditss(): array
    {
        return parent::uniqueArray("credits");
    }
    // Loaders
    /**
     * loadById
    */
    public function loadById(
        int $id,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "id",
            $id,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromIds
    */
    public function loadFromIds(array $values): SetsLoadReply
    {
        return $this->loadIndexes("id", $values);
    }
    /**
     * loadByAvatarUUID
    */
    public function loadByAvatarUUID(
        string $avatarUUID,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "avatarUUID",
            $avatarUUID,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromAvatarUUIDs
    */
    public function loadFromAvatarUUIDs(array $values): SetsLoadReply
    {
        return $this->loadIndexes("avatarUUID", $values);
    }
    /**
     * loadByAvatarName
    */
    public function loadByAvatarName(
        string $avatarName,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "avatarName",
            $avatarName,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromAvatarNames
    */
    public function loadFromAvatarNames(array $values): SetsLoadReply
    {
        return $this->loadIndexes("avatarName", $values);
    }
    /**
     * loadByAvatarUid
    */
    public function loadByAvatarUid(
        string $avatarUid,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "avatarUid",
            $avatarUid,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromAvatarUids
    */
    public function loadFromAvatarUids(array $values): SetsLoadReply
    {
        return $this->loadIndexes("avatarUid", $values);
    }
    /**
     * loadByLastUsed
    */
    public function loadByLastUsed(
        int $lastUsed,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "lastUsed",
            $lastUsed,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromLastUseds
    */
    public function loadFromLastUseds(array $values): SetsLoadReply
    {
        return $this->loadIndexes("lastUsed", $values);
    }
    /**
     * loadByCredits
    */
    public function loadByCredits(
        int $credits,
        int $limit = 0,
        string $orderBy = "id",
        string $orderDir = "DESC"
    ): SetsLoadReply {
        return $this->loadOnField(
            "credits",
            $credits,
            $limit,
            $orderBy,
            $orderDir
        );
    }
    /**
     * loadFromCreditss
    */
    public function loadFromCreditss(array $values): SetsLoadReply
    {
        return $this->loadIndexes("credits", $values);
    }
    // Related loaders
    public function relatedAuditlog(?array $limitFields=null): AuditlogSet
    {
        $ids = $this->uniqueIds();
        $collection = new AuditlogSet();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedBanlist(?array $limitFields=null): BanlistSet
    {
        $ids = $this->uniqueIds();
        $collection = new BanlistSet();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedBotconfig(?array $limitFields=null): BotconfigSet
    {
        $ids = $this->uniqueIds();
        $collection = new BotconfigSet();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedMessage(?array $limitFields=null): MessageSet
    {
        $ids = $this->uniqueIds();
        $collection = new MessageSet();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedNotecardmail(?array $limitFields=null): NotecardmailSet
    {
        $ids = $this->uniqueIds();
        $collection = new NotecardmailSet();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedObjects(?array $limitFields=null): ObjectsSet
    {
        $ids = $this->uniqueIds();
        $collection = new ObjectsSet();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedRental(?array $limitFields=null): RentalSet
    {
        $ids = $this->uniqueIds();
        $collection = new RentalSet();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedReseller(?array $limitFields=null): ResellerSet
    {
        $ids = $this->uniqueIds();
        $collection = new ResellerSet();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedSlconfig(?array $limitFields=null): SlconfigSet
    {
        $ids = $this->uniqueIds();
        $collection = new SlconfigSet();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromOwnerAvatarLinks($ids);
        return $collection;
    }
    public function relatedStaff(?array $limitFields=null): StaffSet
    {
        $ids = $this->uniqueIds();
        $collection = new StaffSet();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
    public function relatedTransactions(?array $limitFields=null): TransactionsSet
    {
        $ids = $this->uniqueIds();
        $collection = new TransactionsSet();
        if($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromAvatarLinks($ids);
        return $collection;
    }
}
