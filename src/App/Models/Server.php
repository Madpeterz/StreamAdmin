<?php

namespace App\Models;

use YAPF\Framework\DbObjects\GenClass\GenClass as GenClass;
use YAPF\Framework\Responses\DbObjects\UpdateReply as UpdateReply;
use YAPF\Framework\Responses\DbObjects\SingleLoadReply as SingleLoadReply;
use App\Models\Set\StreamSet as TestStream;

// Do not edit this file, rerun gen.php to update!
class Server extends genClass
{
    protected $use_table = "server";
    // Data Design
    protected $fields = [
        "id",
        "domain",
        "controlPanelURL",
        "ipaddress",
        "bandwidth",
        "bandwidthType",
        "totalStorage",
        "totalStorageType",
    ];
    protected $dataset = [
        "id" => ["type" => "int", "value" => null],
        "domain" => ["type" => "str", "value" => null],
        "controlPanelURL" => ["type" => "str", "value" => null],
        "ipaddress" => ["type" => "str", "value" => null],
        "bandwidth" => ["type" => "int", "value" => 500],
        "bandwidthType" => ["type" => "str", "value" => "mbps"],
        "totalStorage" => ["type" => "int", "value" => 50],
        "totalStorageType" => ["type" => "str", "value" => "gb"],
    ];
    // Setters
    /**
    * setDomain
    */
    public function setDomain(?string $newValue): UpdateReply
    {
        return $this->updateField("domain", $newValue);
    }
    /**
    * setControlPanelURL
    */
    public function setControlPanelURL(?string $newValue): UpdateReply
    {
        return $this->updateField("controlPanelURL", $newValue);
    }
    /**
    * setIpaddress
    */
    public function setIpaddress(?string $newValue): UpdateReply
    {
        return $this->updateField("ipaddress", $newValue);
    }
    /**
    * setBandwidth
    */
    public function setBandwidth(?int $newValue): UpdateReply
    {
        return $this->updateField("bandwidth", $newValue);
    }
    /**
    * setBandwidthType
    */
    public function setBandwidthType(?string $newValue): UpdateReply
    {
        return $this->updateField("bandwidthType", $newValue);
    }
    /**
    * setTotalStorage
    */
    public function setTotalStorage(?int $newValue): UpdateReply
    {
        return $this->updateField("totalStorage", $newValue);
    }
    /**
    * setTotalStorageType
    */
    public function setTotalStorageType(?string $newValue): UpdateReply
    {
        return $this->updateField("totalStorageType", $newValue);
    }
    // Getters
    public function getDomain(): ?string
    {
        return $this->getField("domain");
    }
    public function getControlPanelURL(): ?string
    {
        return $this->getField("controlPanelURL");
    }
    public function getIpaddress(): ?string
    {
        return $this->getField("ipaddress");
    }
    public function getBandwidth(): ?int
    {
        return $this->getField("bandwidth");
    }
    public function getBandwidthType(): ?string
    {
        return $this->getField("bandwidthType");
    }
    public function getTotalStorage(): ?int
    {
        return $this->getField("totalStorage");
    }
    public function getTotalStorageType(): ?string
    {
        return $this->getField("totalStorageType");
    }
    // Loaders
    public function loadByDomain(string $domain): SingleLoadReply
    {
        return $this->loadByField(
            "domain",
            $domain
        );
    }
    public function loadByControlPanelURL(string $controlPanelURL): SingleLoadReply
    {
        return $this->loadByField(
            "controlPanelURL",
            $controlPanelURL
        );
    }
    public function loadByIpaddress(string $ipaddress): SingleLoadReply
    {
        return $this->loadByField(
            "ipaddress",
            $ipaddress
        );
    }
    public function loadByBandwidth(int $bandwidth): SingleLoadReply
    {
        return $this->loadByField(
            "bandwidth",
            $bandwidth
        );
    }
    public function loadByBandwidthType(string $bandwidthType): SingleLoadReply
    {
        return $this->loadByField(
            "bandwidthType",
            $bandwidthType
        );
    }
    public function loadByTotalStorage(int $totalStorage): SingleLoadReply
    {
        return $this->loadByField(
            "totalStorage",
            $totalStorage
        );
    }
    public function loadByTotalStorageType(string $totalStorageType): SingleLoadReply
    {
        return $this->loadByField(
            "totalStorageType",
            $totalStorageType
        );
    }
    public function relatedStream(?array $limitFields = null): TestStream
    {
        $ids = [$this->getId()];
        $collection = new TestStream();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromServerLinks($ids);
        return $collection;
    }
}
// please do not edit this file
