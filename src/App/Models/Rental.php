<?php

namespace App\Models;

use YAPF\Framework\DbObjects\GenClass\GenClass as GenClass;
use YAPF\Framework\Responses\DbObjects\UpdateReply as UpdateReply;
use YAPF\Framework\Responses\DbObjects\SingleLoadReply as SingleLoadReply;
use App\Models\Set\AvatarSet as TestAvatar;
use App\Models\Set\NoticeSet as TestNotice;
use App\Models\Set\PackageSet as TestPackage;
use App\Models\Set\StreamSet as TestStream;
use App\Models\Set\DetailSet as TestDetail;
use App\Models\Set\NotecardSet as TestNotecard;
use App\Models\Set\RentalnoticeptoutSet as TestRentalnoticeptout;

// Do not edit this file, rerun gen.php to update!
class Rental extends genClass
{
    protected $use_table = "rental";
    // Data Design
    protected $fields = [
        "id",
        "avatarLink",
        "streamLink",
        "packageLink",
        "noticeLink",
        "startUnixtime",
        "expireUnixtime",
        "renewals",
        "totalAmount",
        "message",
        "rentalUid",
    ];
    protected $dataset = [
        "id" => ["type" => "int", "value" => null],
        "avatarLink" => ["type" => "int", "value" => null],
        "streamLink" => ["type" => "int", "value" => null],
        "packageLink" => ["type" => "int", "value" => null],
        "noticeLink" => ["type" => "int", "value" => null],
        "startUnixtime" => ["type" => "int", "value" => null],
        "expireUnixtime" => ["type" => "int", "value" => null],
        "renewals" => ["type" => "int", "value" => 0],
        "totalAmount" => ["type" => "int", "value" => 0],
        "message" => ["type" => "str", "value" => null],
        "rentalUid" => ["type" => "str", "value" => null],
    ];
    // Setters
    /**
    * setAvatarLink
    */
    public function setAvatarLink(?int $newValue): UpdateReply
    {
        return $this->updateField("avatarLink", $newValue);
    }
    /**
    * setStreamLink
    */
    public function setStreamLink(?int $newValue): UpdateReply
    {
        return $this->updateField("streamLink", $newValue);
    }
    /**
    * setPackageLink
    */
    public function setPackageLink(?int $newValue): UpdateReply
    {
        return $this->updateField("packageLink", $newValue);
    }
    /**
    * setNoticeLink
    */
    public function setNoticeLink(?int $newValue): UpdateReply
    {
        return $this->updateField("noticeLink", $newValue);
    }
    /**
    * setStartUnixtime
    */
    public function setStartUnixtime(?int $newValue): UpdateReply
    {
        return $this->updateField("startUnixtime", $newValue);
    }
    /**
    * setExpireUnixtime
    */
    public function setExpireUnixtime(?int $newValue): UpdateReply
    {
        return $this->updateField("expireUnixtime", $newValue);
    }
    /**
    * setRenewals
    */
    public function setRenewals(?int $newValue): UpdateReply
    {
        return $this->updateField("renewals", $newValue);
    }
    /**
    * setTotalAmount
    */
    public function setTotalAmount(?int $newValue): UpdateReply
    {
        return $this->updateField("totalAmount", $newValue);
    }
    /**
    * setMessage
    */
    public function setMessage(?string $newValue): UpdateReply
    {
        return $this->updateField("message", $newValue);
    }
    /**
    * setRentalUid
    */
    public function setRentalUid(?string $newValue): UpdateReply
    {
        return $this->updateField("rentalUid", $newValue);
    }
    // Getters
    public function getAvatarLink(): ?int
    {
        return $this->getField("avatarLink");
    }
    public function getStreamLink(): ?int
    {
        return $this->getField("streamLink");
    }
    public function getPackageLink(): ?int
    {
        return $this->getField("packageLink");
    }
    public function getNoticeLink(): ?int
    {
        return $this->getField("noticeLink");
    }
    public function getStartUnixtime(): ?int
    {
        return $this->getField("startUnixtime");
    }
    public function getExpireUnixtime(): ?int
    {
        return $this->getField("expireUnixtime");
    }
    public function getRenewals(): ?int
    {
        return $this->getField("renewals");
    }
    public function getTotalAmount(): ?int
    {
        return $this->getField("totalAmount");
    }
    public function getMessage(): ?string
    {
        return $this->getField("message");
    }
    public function getRentalUid(): ?string
    {
        return $this->getField("rentalUid");
    }
    // Loaders
    public function loadByAvatarLink(int $avatarLink): SingleLoadReply
    {
        return $this->loadByField(
            "avatarLink",
            $avatarLink
        );
    }
    public function loadByStreamLink(int $streamLink): SingleLoadReply
    {
        return $this->loadByField(
            "streamLink",
            $streamLink
        );
    }
    public function loadByPackageLink(int $packageLink): SingleLoadReply
    {
        return $this->loadByField(
            "packageLink",
            $packageLink
        );
    }
    public function loadByNoticeLink(int $noticeLink): SingleLoadReply
    {
        return $this->loadByField(
            "noticeLink",
            $noticeLink
        );
    }
    public function loadByStartUnixtime(int $startUnixtime): SingleLoadReply
    {
        return $this->loadByField(
            "startUnixtime",
            $startUnixtime
        );
    }
    public function loadByExpireUnixtime(int $expireUnixtime): SingleLoadReply
    {
        return $this->loadByField(
            "expireUnixtime",
            $expireUnixtime
        );
    }
    public function loadByRenewals(int $renewals): SingleLoadReply
    {
        return $this->loadByField(
            "renewals",
            $renewals
        );
    }
    public function loadByTotalAmount(int $totalAmount): SingleLoadReply
    {
        return $this->loadByField(
            "totalAmount",
            $totalAmount
        );
    }
    public function loadByMessage(string $message): SingleLoadReply
    {
        return $this->loadByField(
            "message",
            $message
        );
    }
    public function loadByRentalUid(string $rentalUid): SingleLoadReply
    {
        return $this->loadByField(
            "rentalUid",
            $rentalUid
        );
    }
    public function relatedAvatar(?array $limitFields = null): TestAvatar
    {
        $ids = [$this->getAvatarLink()];
        $collection = new TestAvatar();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromIds($ids);
        return $collection;
    }
    public function relatedNotice(?array $limitFields = null): TestNotice
    {
        $ids = [$this->getNoticeLink()];
        $collection = new TestNotice();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromIds($ids);
        return $collection;
    }
    public function relatedPackage(?array $limitFields = null): TestPackage
    {
        $ids = [$this->getPackageLink()];
        $collection = new TestPackage();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromIds($ids);
        return $collection;
    }
    public function relatedStream(?array $limitFields = null): TestStream
    {
        $ids = [$this->getStreamLink()];
        $collection = new TestStream();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromIds($ids);
        return $collection;
    }
    public function relatedDetail(?array $limitFields = null): TestDetail
    {
        $ids = [$this->getId()];
        $collection = new TestDetail();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromRentalLinks($ids);
        return $collection;
    }
    public function relatedNotecard(?array $limitFields = null): TestNotecard
    {
        $ids = [$this->getId()];
        $collection = new TestNotecard();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromRentalLinks($ids);
        return $collection;
    }
    public function relatedRentalnoticeptout(?array $limitFields = null): TestRentalnoticeptout
    {
        $ids = [$this->getId()];
        $collection = new TestRentalnoticeptout();
        if ($limitFields !== null) {
            $collection->limitFields($limitFields);
        }
        $collection->loadFromRentalLinks($ids);
        return $collection;
    }
}
// please do not edit this file
