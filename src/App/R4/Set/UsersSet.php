<?php

namespace App\R4\Set;

use YAPF\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use App\R4\Model\Users as Users;

// Do not edit this file, rerun gen.php to update!
class UsersSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("App\R4\Model\Users");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Users
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Users
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldname, $value): ?Users
    {
        return parent::getObjectByField($fieldname, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Users
    {
        return parent::current();
    }
    // Loaders
    /**
     * loadByItemid
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByItemid(
                    float $itemid, 
                    int $limit = 0, 
                    string $orderBy = "id", 
                    string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField("itemid", $itemid, $limit, $orderBy, $orderDir);
    }
    /**
     * loadBySlkey
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadBySlkey(
                    string $slkey, 
                    int $limit = 0, 
                    string $orderBy = "id", 
                    string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField("slkey", $slkey, $limit, $orderBy, $orderDir);
    }
    /**
     * loadBySlname
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadBySlname(
                    string $slname, 
                    int $limit = 0, 
                    string $orderBy = "id", 
                    string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField("slname", $slname, $limit, $orderBy, $orderDir);
    }
    /**
     * loadByBuyfromboxkey
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByBuyfromboxkey(
                    string $buyfromboxkey, 
                    int $limit = 0, 
                    string $orderBy = "id", 
                    string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField("buyfromboxkey", $buyfromboxkey, $limit, $orderBy, $orderDir);
    }
    /**
     * loadByVenderlanddetail
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByVenderlanddetail(
                    string $venderlanddetail, 
                    int $limit = 0, 
                    string $orderBy = "id", 
                    string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField("venderlanddetail", $venderlanddetail, $limit, $orderBy, $orderDir);
    }
    /**
     * loadByNoticesent
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByNoticesent(
                    int $noticesent, 
                    int $limit = 0, 
                    string $orderBy = "id", 
                    string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField("noticesent", $noticesent, $limit, $orderBy, $orderDir);
    }
    /**
     * loadByNotes
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByNotes(
                    string $notes, 
                    int $limit = 0, 
                    string $orderBy = "id", 
                    string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField("notes", $notes, $limit, $orderBy, $orderDir);
    }
    /**
     * loadByExpireunix
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByExpireunix(
                    int $expireunix, 
                    int $limit = 0, 
                    string $orderBy = "id", 
                    string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField("expireunix", $expireunix, $limit, $orderBy, $orderDir);
    }
    /**
     * loadByPackageid
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByPackageid(
                    int $packageid, 
                    int $limit = 0, 
                    string $orderBy = "id", 
                    string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField("packageid", $packageid, $limit, $orderBy, $orderDir);
    }
    /**
     * loadByLocktoreseller
     * @return mixed[] [status =>  bool, count => integer, message =>  string]
    */
    public function loadByLocktoreseller(
                    int $locktoreseller, 
                    int $limit = 0, 
                    string $orderBy = "id", 
                    string $orderDir = "DESC"
    ): array
    {
        return $this->loadByField("locktoreseller", $locktoreseller, $limit, $orderBy, $orderDir);
    }
}
