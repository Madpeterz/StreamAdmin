<?php

namespace App\R7\Set;

use YAPF\DbObjects\CollectionSet\CollectionSet as CollectionSet;
use App\R7\Model\Transactions as Transactions;

// Do not edit this file, rerun gen.php to update!
class TransactionsSet extends CollectionSet
{
    public function __construct()
    {
        parent::__construct("App\R7\Model\Transactions");
    }
    /**
     * getObjectByID
     * returns a object that matchs the selected id
     * returns null if not found
     * Note: Does not support bad Ids please use findObjectByField
     */
    public function getObjectByID($id): ?Transactions
    {
        return parent::getObjectByID($id);
    }
    /**
     * getFirst
     * returns the first object in a collection
     */
    public function getFirst(): ?Transactions
    {
        return parent::getFirst();
    }
    /**
     * getObjectByField
     * returns the first object in a collection that matchs the field and value checks
     */
    public function getObjectByField(string $fieldname, $value): ?Transactions
    {
        return parent::getObjectByField($fieldname, $value);
    }
    /**
     * current
     * used by foreach to get the object should not be called directly
     */
    public function current(): Transactions
    {
        return parent::current();
    }
    // Loaders
    //@return mixed[] [status =>  bool, count => integer, message =>  string]
    public function loadByAvatarLink(int $avatarLink, int $limit=0, string $orderBy="id", string $orderDir="DESC"): array
    {
        return $this->loadByField("avatarLink", $avatarLink, $limit, $orderBy, $orderDir);
    }
    //@return mixed[] [status =>  bool, count => integer, message =>  string]
    public function loadByPackageLink(int $packageLink, int $limit=0, string $orderBy="id", string $orderDir="DESC"): array
    {
        return $this->loadByField("packageLink", $packageLink, $limit, $orderBy, $orderDir);
    }
    //@return mixed[] [status =>  bool, count => integer, message =>  string]
    public function loadByStreamLink(int $streamLink, int $limit=0, string $orderBy="id", string $orderDir="DESC"): array
    {
        return $this->loadByField("streamLink", $streamLink, $limit, $orderBy, $orderDir);
    }
    //@return mixed[] [status =>  bool, count => integer, message =>  string]
    public function loadByResellerLink(int $resellerLink, int $limit=0, string $orderBy="id", string $orderDir="DESC"): array
    {
        return $this->loadByField("resellerLink", $resellerLink, $limit, $orderBy, $orderDir);
    }
    //@return mixed[] [status =>  bool, count => integer, message =>  string]
    public function loadByRegionLink(int $regionLink, int $limit=0, string $orderBy="id", string $orderDir="DESC"): array
    {
        return $this->loadByField("regionLink", $regionLink, $limit, $orderBy, $orderDir);
    }
    //@return mixed[] [status =>  bool, count => integer, message =>  string]
    public function loadByAmount(int $amount, int $limit=0, string $orderBy="id", string $orderDir="DESC"): array
    {
        return $this->loadByField("amount", $amount, $limit, $orderBy, $orderDir);
    }
    //@return mixed[] [status =>  bool, count => integer, message =>  string]
    public function loadByUnixtime(int $unixtime, int $limit=0, string $orderBy="id", string $orderDir="DESC"): array
    {
        return $this->loadByField("unixtime", $unixtime, $limit, $orderBy, $orderDir);
    }
    //@return mixed[] [status =>  bool, count => integer, message =>  string]
    public function loadByTransactionUid(string $transactionUid, int $limit=0, string $orderBy="id", string $orderDir="DESC"): array
    {
        return $this->loadByField("transactionUid", $transactionUid, $limit, $orderBy, $orderDir);
    }
    //@return mixed[] [status =>  bool, count => integer, message =>  string]
    public function loadByRenew(bool $renew, int $limit=0, string $orderBy="id", string $orderDir="DESC"): array
    {
        return $this->loadByField("renew", $renew, $limit, $orderBy, $orderDir);
    }
    //@return mixed[] [status =>  bool, count => integer, message =>  string]
    public function loadBySLtransactionUUID(string $SLtransactionUUID, int $limit=0, string $orderBy="id", string $orderDir="DESC"): array
    {
        return $this->loadByField("SLtransactionUUID", $SLtransactionUUID, $limit, $orderBy, $orderDir);
    }
    //@return mixed[] [status =>  bool, count => integer, message =>  string]
    public function loadByViaHud(bool $ViaHud, int $limit=0, string $orderBy="id", string $orderDir="DESC"): array
    {
        return $this->loadByField("ViaHud", $ViaHud, $limit, $orderBy, $orderDir);
    }
}
