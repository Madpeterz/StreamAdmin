<?php

namespace YAPF\Generator;

class ModelFactory extends GeneratorWriter
{
    protected function createModel(string $target_table, string $target_database): void
    {
        $this->found_id = false;
        $create_file = GEN_SAVE_MODELS_TO . $target_table . ".php";
        echo "Starting file: " . $create_file . " - ";
        $results = $this->getTableColumns($target_table, $target_database);
        if ($results == null) {
            $this->addError(__FILE__, __FUNCTION__, "Error ~ Unable to get fields");
            echo "Error ~ Unable to get fields";
            return;
        }
        $this->file_lines = [];
        $this->createModelHeader($target_database, $target_table);
        $this->createModelDataset($target_table, $results);
        $this->createModelGetters($results);
        $this->createModelSetters($results);
        $this->createModelFooter();
        $this->writeModelFile($create_file);
    }

    protected function createModelFooter(array &$file_lines): void
    {
        $file_lines[] = [1];
        $file_lines[] = '}';
        $file_lines[] = [0];
        $file_lines[] = '// please do not edit this file';
        $file_lines[] = '';
    }

    protected function createModelSetters(array $data_two, array &$file_lines): void
    {
        foreach ($data_two["dataSet"] as $row_two) {
            if ($row_two["COLUMN_NAME"] != "id") {
                $return_type_addon = "";
                $use_type = get_col_type($row_two["DATA_TYPE"], $row_two["COLUMN_TYPE"]);
                if ($use_type == "float") {
                    $use_type = "double";
                } elseif ($use_type == "str") {
                    $use_type = "string";
                }
                $return_type_addon = "?" . $use_type . "";
                $set_function = 'public function set_' . $row_two["COLUMN_NAME"];
                $set_function .= '(' . $return_type_addon . ' $newvalue) : array';
                $set_function .= ' { ';
                $set_function .= ' return $this->update_field("' . $row_two["COLUMN_NAME"] . '",$newvalue); ';
                $set_function .= ' } ';
                $file_lines[] .= $set_function;
            }
        }
    }

    protected function createModelGetters(array $data_two, array &$file_lines): void
    {
        foreach ($data_two["dataSet"] as $row_two) {
            if ($row_two["COLUMN_NAME"] != "id") {
                $return_type_addon = "";
                $use_type = $this->getColType($row_two["DATA_TYPE"], $row_two["COLUMN_TYPE"]);
                if ($use_type == "float") {
                    $use_type = "double";
                } elseif ($use_type == "str") {
                    $use_type = "string";
                }
                $return_type_addon = ": ?" . $use_type . "";
                $get_function = 'public function get_' . $row_two["COLUMN_NAME"] . '() ' . $return_type_addon . '';
                $get_function .= ' { ';
                $get_function .= ' return $this->get_field("' . $row_two["COLUMN_NAME"] . '"); ';
                $get_function .= ' } ';
                $this->file_lines[] .= $get_function;
            }
        }
    }

    protected function createModelDataset(string $target_table, array $data_two, array &$file_lines): void
    {
        $file_lines[] = 'protected $dataset = array(';
        $file_lines[] = [3];
        foreach ($data_two["dataSet"] as $row_two) {
            $use_type = $this->getColType(
                $row_two["DATA_TYPE"],
                $row_two["COLUMN_TYPE"],
                $target_table,
                $row_two["COLUMN_NAME"],
                true
            );
            $detected_default = $row_two["COLUMN_DEFAULT"];
            if (($row_two["COLUMN_DEFAULT"] == null) || ($row_two["COLUMN_DEFAULT"] == "NULL")) {
                $detected_default = "null";
            }
            $line = '"' . $row_two["COLUMN_NAME"] . '" => array("type"=>"';
            $line .= $use_type . '","value"=>' . $detected_default . '),';
            $this->file_lines[] = $line;
        }
        $this->file_lines[] = [2];
        $this->file_lines[] = ');';
    }

    protected function createModelHeader(string $database, string $target_table): void
    {
        $add_target_db_to_class = "";
        if (GEN_ADD_DB_TO_TABLE == true) {
            $add_target_db_to_class = $database . ".";
        }
        $class_name = ucfirst(strtolower($target_table));
        $this->file_lines[] = '<?php';
        $this->file_lines[] = '';
        $this->file_lines[] = [1];
        $this->file_lines[] = 'namespace App;';
        $this->file_lines[] = '';
        $this->file_lines[] = 'use YAPF\DB_OBJECTS\CollectionSet as CollectionSet;';
        $this->file_lines[] = 'use YAPF\DB_OBJECTS\GenClass as GenClass;';
        $this->file_lines[] = '';
        $this->file_lines[] = '// Do not edit this file, rerun gen.php to update!';
        $this->file_lines[] = 'class ' . $class_name . '_set extends CollectionSet { }';
        $this->file_lines[] = '';
        $this->file_lines[] = 'class ' . $class_name . ' extends genClass';
        $this->file_lines[] = '{';
        $this->file_lines[] = [2];
        $this->file_lines[] = 'protected $use_table = "' . $add_target_db_to_class . '' . $target_table . '";';
    }
}
