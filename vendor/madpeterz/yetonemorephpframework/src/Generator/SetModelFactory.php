<?php

namespace YAPF\Framework\Generator;

class SetModelFactory extends SingleModelFactory
{
    protected function createModelHeader(): void
    {
        $this->file_lines[] = '<?php';
        $this->file_lines[] = '';
        $this->file_lines[] = 'namespace ' . $this->namespaceSet . ';';
        $this->file_lines[] = '';
        $this->file_lines[] = 'use YAPF\Framework\DbObjects\CollectionSet\CollectionSet as CollectionSet;';
        $this->file_lines[] = 'use ' . $this->namespaceSingle . '\\'
        . $this->classname . ' as ' . $this->classname . ';';
        $this->file_lines[] = '';
        $this->file_lines[] = '// Do not edit this file, rerun gen.php to update!';
        $this->file_lines[] = 'class ' . $this->classname . 'Set extends CollectionSet';
        $this->file_lines[] = '{';
        $this->file_lines[] = [1];
        $this->file_lines[] = 'public function __construct()';
        $this->file_lines[] = '{';
        $this->file_lines[] = [2];
        $this->file_lines[] = 'parent::__construct("' . $this->namespaceSingle . '\\' . $this->classname . '");';
        $this->file_lines[] = [1];
        $this->file_lines[] = '}';
        $this->file_lines[] = [1];
    }

    protected function createModelDataset(): void
    {
        // Not used
    }

    protected function createModelSetters(): void
    {
        // Not used
    }

    protected function createModelGetters(): void
    {
        $this->file_lines[] = '/**';
        $this->file_lines[] = ' * getObjectByID';
        $this->file_lines[] = ' * returns a object that matchs the selected id';
        $this->file_lines[] = ' * returns null if not found';
        $this->file_lines[] = ' * Note: Does not support bad Ids please use findObjectByField';
        $this->file_lines[] = ' */';
        $this->file_lines[] = 'public function getObjectByID($id): ?' . $this->classname . '';
        $this->file_lines[] = '{';
        $this->file_lines[] = [2];
        $this->file_lines[] = 'return parent::getObjectByID($id);';
        $this->file_lines[] = [1];
        $this->file_lines[] = '}';
        $this->file_lines[] = '/**';
        $this->file_lines[] = ' * getFirst';
        $this->file_lines[] = ' * returns the first object in a collection';
        $this->file_lines[] = ' */';
        $this->file_lines[] = 'public function getFirst(): ?' . $this->classname . '';
        $this->file_lines[] = '{';
        $this->file_lines[] = [2];
        $this->file_lines[] = 'return parent::getFirst();';
        $this->file_lines[] = [1];
        $this->file_lines[] = '}';
        $this->file_lines[] = '/**';
        $this->file_lines[] = ' * getObjectByField';
        $this->file_lines[] = ' * returns the first object in a collection that matchs the field and value checks';
        $this->file_lines[] = ' */';
        $this->file_lines[] = 'public function getObjectByField(string $fieldname, $value): ?' . $this->classname . '';
        $this->file_lines[] = '{';
        $this->file_lines[] = [2];
        $this->file_lines[] = 'return parent::getObjectByField($fieldname, $value);';
        $this->file_lines[] = [1];
        $this->file_lines[] = '}';
        $this->file_lines[] = '/**';
        $this->file_lines[] = ' * current';
        $this->file_lines[] = ' * used by foreach to get the object should not be called directly';
        $this->file_lines[] = ' */';
        $this->file_lines[] = 'public function current(): ' . $this->classname . '';
        $this->file_lines[] = '{';
        $this->file_lines[] = [2];
        $this->file_lines[] = 'return parent::current();';
        $this->file_lines[] = [1];
        $this->file_lines[] = '}';

        foreach ($this->cols as $row_two) {
            $use_type = $this->getColType(
                $row_two["DATA_TYPE"],
                $row_two["COLUMN_TYPE"],
                $this->table,
                $row_two["COLUMN_NAME"]
            );
            if ($use_type == "str") {
                $use_type = "string";
            }
            $functionName = "unique" . ucfirst($row_two["COLUMN_NAME"]) . "s";
            $this->file_lines[] = '/**';
            $this->file_lines[] = ' * ' . $functionName . '';
            $this->file_lines[] = ' * returns unique values from the collection matching that field';
            $this->file_lines[] = ' * @return array<' . $use_type . '>';
            $this->file_lines[] = ' */';
            $this->file_lines[] = 'public function ' . $functionName . '(): array';
            $this->file_lines[] = '{';
            $this->file_lines[] = [2];
            $this->file_lines[] = 'return parent::uniqueArray("' . $row_two["COLUMN_NAME"] . '");';
            $this->file_lines[] = [1];
            $this->file_lines[] = '}';
        }
    }

    protected function createModelLoaders(): void
    {
        $this->file_lines[] = "// Loaders";
        foreach ($this->cols as $row_two) {
            $use_type = $this->getColType(
                $row_two["DATA_TYPE"],
                $row_two["COLUMN_TYPE"],
                $this->table,
                $row_two["COLUMN_NAME"]
            );
            if ($use_type == "str") {
                $use_type = "string";
            }
            $functionloadname = 'loadBy' . ucfirst($row_two["COLUMN_NAME"]);

            $this->file_lines[] = '/**';
            $this->file_lines[] = ' * ' . $functionloadname;
            $this->file_lines[] = ' * @return mixed[] [status =>  bool, count => integer, message =>  string]';
            $this->file_lines[] = '*/';
            $this->file_lines[] = 'public function ' . $functionloadname . '(';
            $this->file_lines[] = [2];
            $this->file_lines[] = $use_type . ' $' . $row_two["COLUMN_NAME"] . ', ';
            $this->file_lines[] = 'int $limit = 0, ';
            $this->file_lines[] = 'string $orderBy = "id", ';
            $this->file_lines[] = 'string $orderDir = "DESC"';
            $this->file_lines[] = [1];
            $this->file_lines[] = '): array';
            $this->file_lines[] = '{';
            $this->file_lines[] = [2];
            $this->file_lines[] = 'return $this->loadByField(';
            $this->file_lines[] = [3];
            $this->file_lines[] = '"' . $row_two["COLUMN_NAME"] . '", ';
            $this->file_lines[] = '$' . $row_two["COLUMN_NAME"] . ', ';
            $this->file_lines[] = '$limit, ';
            $this->file_lines[] = '$orderBy, ';
            $this->file_lines[] = '$orderDir';
            $this->file_lines[] = [2];
            $this->file_lines[] =  ');';
            $this->file_lines[] = [1];
            $this->file_lines[] = '}';

            $functionloadname = 'loadFrom' . ucfirst($row_two["COLUMN_NAME"]) . 's';

            $this->file_lines[] = '/**';
            $this->file_lines[] = ' * ' . $functionloadname;
            $this->file_lines[] = ' * @return array<mixed> [status =>  bool, count => integer, message =>  string]';
            $this->file_lines[] = '*/';
            $this->file_lines[] = 'public function ' . $functionloadname . '(array $values): array';
            $this->file_lines[] = '{';
            $this->file_lines[] = [2];
            $this->file_lines[] = 'return $this->loadIndexs("' . $row_two["COLUMN_NAME"] . '", $values);';
            $this->file_lines[] = [1];
            $this->file_lines[] = '}';
        }
    }

    protected function createRelatedLoaders(): void
    {
        $this->file_lines[] = '// Related loaders';
        $this->seenRelated = [];
        foreach ($this->links as $id => $entry) {
            $targetclass = "";
            $fromField = "";
            $loadField = "";
            if ($entry["source_table"] == $this->table) {
                $targetclass = ucfirst(strtolower($entry["target_table"]));
                $fromField = ucfirst($entry["source_field"]);
                $loadField = ucfirst($entry["target_field"]);
            } elseif ($entry["target_table"] == $this->table) {
                $targetclass = ucfirst(strtolower($entry["source_table"]));
                $fromField = ucfirst($entry["target_field"]);
                $loadField = ucfirst($entry["source_field"]);
            }
            if ($targetclass == "") {
                continue;
            }

            $targetclassname =  $targetclass . "Set";
            if (in_array($targetclassname, $this->seenRelated) == true) {
                continue;
            }

            $this->seenRelated[] = $targetclassname;
            $this->file_lines[] = 'public function related' . $targetclass . '(): ' . $targetclassname . '';
            $this->file_lines[] = '{';
            $this->file_lines[] = [2];
            $this->file_lines[] = '$ids = $this->unique' . $fromField . 's();';
            $this->file_lines[] = '$collection = new ' . $targetclassname . '();';
            $this->file_lines[] = '$collection->loadFrom' . $loadField . 's($ids);';
            $this->file_lines[] = 'return $collection;';
            $this->file_lines[] = [1];
            $this->file_lines[] = '}';
        }
    }

    protected function createModelFooter(): void
    {
        $this->file_lines[] = [0];
        $this->file_lines[] = '}';
    }
}
